// Generated by gencpp from file core_msgs/markermsg.msg
// DO NOT EDIT!


#ifndef CORE_MSGS_MESSAGE_MARKERMSG_H
#define CORE_MSGS_MESSAGE_MARKERMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/CompressedImage.h>
#include <sensor_msgs/CompressedImage.h>

namespace core_msgs
{
template <class ContainerAllocator>
struct markermsg_
{
  typedef markermsg_<ContainerAllocator> Type;

  markermsg_()
    : image1_available(0)
    , image2_available(0)
    , image1()
    , image2()
    , cimage1()
    , cimage2()  {
    }
  markermsg_(const ContainerAllocator& _alloc)
    : image1_available(0)
    , image2_available(0)
    , image1(_alloc)
    , image2(_alloc)
    , cimage1(_alloc)
    , cimage2(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _image1_available_type;
  _image1_available_type image1_available;

   typedef int32_t _image2_available_type;
  _image2_available_type image2_available;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image1_type;
  _image1_type image1;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image2_type;
  _image2_type image2;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _cimage1_type;
  _cimage1_type cimage1;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _cimage2_type;
  _cimage2_type cimage2;





  typedef boost::shared_ptr< ::core_msgs::markermsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_msgs::markermsg_<ContainerAllocator> const> ConstPtr;

}; // struct markermsg_

typedef ::core_msgs::markermsg_<std::allocator<void> > markermsg;

typedef boost::shared_ptr< ::core_msgs::markermsg > markermsgPtr;
typedef boost::shared_ptr< ::core_msgs::markermsg const> markermsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core_msgs::markermsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core_msgs::markermsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace core_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'core_msgs': ['/home/thanhndv212/capstone_1_ROS/src/core_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::markermsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::markermsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_msgs::markermsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_msgs::markermsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::markermsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::markermsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core_msgs::markermsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98f621d5189a43a5c67a336a1b0496cb";
  }

  static const char* value(const ::core_msgs::markermsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98f621d5189a43a5ULL;
  static const uint64_t static_value2 = 0xc67a336a1b0496cbULL;
};

template<class ContainerAllocator>
struct DataType< ::core_msgs::markermsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core_msgs/markermsg";
  }

  static const char* value(const ::core_msgs::markermsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core_msgs::markermsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 image1_available\n\
int32 image2_available\n\
sensor_msgs/Image image1\n\
sensor_msgs/Image image2\n\
sensor_msgs/CompressedImage cimage1\n\
sensor_msgs/CompressedImage cimage2\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of camera\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/CompressedImage\n\
# This message contains a compressed image\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of camera\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
\n\
string format        # Specifies the format of the data\n\
                     #   Acceptable values:\n\
                     #     jpeg, png\n\
uint8[] data         # Compressed image buffer\n\
";
  }

  static const char* value(const ::core_msgs::markermsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core_msgs::markermsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image1_available);
      stream.next(m.image2_available);
      stream.next(m.image1);
      stream.next(m.image2);
      stream.next(m.cimage1);
      stream.next(m.cimage2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct markermsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_msgs::markermsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core_msgs::markermsg_<ContainerAllocator>& v)
  {
    s << indent << "image1_available: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image1_available);
    s << indent << "image2_available: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image2_available);
    s << indent << "image1: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image1);
    s << indent << "image2: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image2);
    s << indent << "cimage1: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.cimage1);
    s << indent << "cimage2: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.cimage2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_MSGS_MESSAGE_MARKERMSG_H
